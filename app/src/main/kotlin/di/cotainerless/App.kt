/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package di.cotainerless

class DataSource

class AccommodationPriceRepository(dataSource: DataSource)
class AccommodationPriceValidator
class AccommodationPriceService(repository: AccommodationPriceRepository, validator: AccommodationPriceValidator)

class AccommodationInventoryRepository(dataSource: DataSource)
class AccommodationInventoryValidator
class AccommodationOccupancySolver
class AccommodationInventoryService(
    repository: AccommodationInventoryRepository,
    validator: AccommodationInventoryValidator,
    occupancySolver: AccommodationOccupancySolver
)

class FlightPriceRepository(dataSource: DataSource)
class FlightPriceValidator
class FlightPriceService(
    flightPriceRepository: FlightPriceRepository, flightPriceValidator: FlightPriceValidator
)

class FlightInventoryRepository(dataSource: DataSource)
class FlightInventoryValidator
class FlightInventoryService(
    flightInventoryRepository: FlightInventoryRepository, flightInventoryValidator: FlightInventoryValidator
)

class AccommodationFightCombiner

class OfferBuilder(
    accommodationInventoryService: AccommodationInventoryService,
    accommodationPriceService: AccommodationPriceService,
    flightInventoryService: FlightInventoryService,
    flightPriceService: FlightPriceService,
    accommodationFightCombiner: AccommodationFightCombiner
)

class PackageEndpoint(offerBuilder: OfferBuilder)

class StayEndpoint(offerBuilder: OfferBuilder)

class Logger

class Tracer


interface Endpoint

class WebRouter(private val endpoints: List<Endpoint>) {
    fun run() { endpoints.forEach { println("Endpoint goes brr $it") } }
}

fun diLess(): WebRouter {
    val dataSource = DataSource()

    val accommodationPriceRepository = AccommodationPriceRepository(dataSource)
    val accommodationPriceValidator = AccommodationPriceValidator()
    val accommodationPriceService = AccommodationPriceService(accommodationPriceRepository, accommodationPriceValidator)
}

fun di(): WebRouter {
    return WebRouter(
        emptyList()
    )
}

fun main() {
    val diLess = diLess()
    diLess.run()

    val di = di()
    di.run()
}
